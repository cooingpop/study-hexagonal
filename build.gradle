plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.7'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	// https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
	// https://mvnrepository.com/artifact/org.mybatis/mybatis-spring

	implementation 'org.mybatis:mybatis:3.5.19'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	runtimeOnly 'com.mysql:mysql-connector-j'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// 테스트를 위한 Lombok 설정
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'com.tngtech.archunit:archunit-junit5:1.3.0'
}

tasks.named('test', Test) {
	useJUnitPlatform {
		includeTags 'critical'
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		exceptionFormat = 'full'
		showExceptions = true
		showCauses = true
		showStackTraces = true

		// 콘솔에 상세한 테스트 정보 출력
		outputs.upToDateWhen { false }
		showStandardStreams = true
	}

	// 테스트 실패 시 즉시 빌드 실패하지 않고 모든 테스트 실행
	ignoreFailures = true

	afterTest { desc, result ->
		if (result.resultType == TestResult.ResultType.FAILURE) {
			println "Failed test: ${desc.className}.${desc.name}"
			println "Failure: ${result.exception}"
		}
	}
}
